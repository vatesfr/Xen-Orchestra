/* eslint-env jest */

import { camelToSnakeCase, diffItems, extractProperty, generateToken, parseSize, parseXml, pSettle } from './utils'

// ===================================================================

describe('camelToSnakeCase()', function () {
  it('converts a string from camelCase to snake_case', function () {
    expect(camelToSnakeCase('fooBar')).toBe('foo_bar')
    expect(camelToSnakeCase('ipv4Allowed')).toBe('ipv4_allowed')
  })

  it('does not alter snake_case strings', function () {
    expect(camelToSnakeCase('foo_bar')).toBe('foo_bar')
    expect(camelToSnakeCase('ipv4_allowed')).toBe('ipv4_allowed')
  })

  it('does not alter upper case letters expect those from the camelCase', function () {
    expect(camelToSnakeCase('fooBar_BAZ')).toBe('foo_bar_BAZ')
  })
})

// -------------------------------------------------------------------

describe('diffItems', () => {
  it('computes the added/removed items between 2 iterables', () => {
    expect(diffItems(['foo', 'bar'], ['baz', 'foo'])).toEqual([['bar'], ['baz']])
  })
})

// -------------------------------------------------------------------

describe('extractProperty()', function () {
  it('returns the value of the property', function () {
    const value = {}
    const obj = { prop: value }

    expect(extractProperty(obj, 'prop')).toBe(value)
  })

  it('removes the property from the object', function () {
    const value = {}
    const obj = { prop: value }

    expect(extractProperty(obj, 'prop')).toBe(value)
    expect(obj.prop).not.toBeDefined()
  })
})

// -------------------------------------------------------------------

describe('parseXml()', () => {
  // excerpt of http://updates.xensource.com/XenServer/updates.xml
  const str = `<?xml version="1.0" ?>
<patchdata>
  <!-- Generated by cfu.py, do not edit -->
  <patches>
    <patch after-apply-guidance="" name-description="Security update when starting Linux VMs." name-label="Hotfix 2007-001" patch-url="http://downloadns.citrix.com.edgesuite.net/akdlm/9618/2007-001.zip" releasenotes="" timestamp="2007-09-19T00:00:00Z" url="https://support.citrix.com/article/CTX118090" uuid="0701" version="1.0">
      <!-- serverversion = '4.0.1' -->
    </patch>
    <patch after-apply-guidance="" name-description="Stability update for large hotfixes." name-label="Hotfix 2007-002" patch-url="http://downloadns.citrix.com.edgesuite.net/akdlm/9618/2007-002.zip" releasenotes="" timestamp="2007-10-29T00:00:00Z" url="https://support.citrix.com/article/CTX118097" uuid="0702" version="1.0">
      <!-- serverversion = '4.0.1' -->
    </patch>
  </patches>
</patchdata>`
  const buf = Buffer.from(str)
  const result = {
    patchdata: {
      patches: {
        patch: [
          {
            'after-apply-guidance': '',
            'name-description': 'Security update when starting Linux VMs.',
            'name-label': 'Hotfix 2007-001',
            'patch-url': 'http://downloadns.citrix.com.edgesuite.net/akdlm/9618/2007-001.zip',
            releasenotes: '',
            timestamp: '2007-09-19T00:00:00Z',
            url: 'https://support.citrix.com/article/CTX118090',
            uuid: '0701',
            version: '1.0',
          },
          {
            'after-apply-guidance': '',
            'name-description': 'Stability update for large hotfixes.',
            'name-label': 'Hotfix 2007-002',
            'patch-url': 'http://downloadns.citrix.com.edgesuite.net/akdlm/9618/2007-002.zip',
            releasenotes: '',
            timestamp: '2007-10-29T00:00:00Z',
            url: 'https://support.citrix.com/article/CTX118097',
            uuid: '0702',
            version: '1.0',
          },
        ],
      },
    },
  }

  it('supports strings', () => {
    expect(parseXml(str)).toEqual(result)
  })

  it('supports buffers', () => {
    expect(parseXml(buf)).toEqual(result)
  })
})

// -------------------------------------------------------------------

describe('generateToken()', () => {
  it('generates a string', async () => {
    expect(typeof (await generateToken())).toBe('string')
  })
})

// -------------------------------------------------------------------

describe('parseSize()', function () {
  it('parses a human size', function () {
    expect(parseSize('1G')).toBe(1e9)
  })

  it('returns the parameter if already a number', function () {
    expect(parseSize(1e6)).toBe(1e6)
  })

  it('throws if the string cannot be parsed', function () {
    expect(function () {
      parseSize('foo')
    }).toThrow()
  })

  it('supports the B unit as suffix', function () {
    expect(parseSize('3MB')).toBe(3e6)
  })
})

// -------------------------------------------------------------------

describe('pSettle()', () => {
  it('works with arrays', async () => {
    const rejection = 'fatality'
    const [status1, status2, status3] = await pSettle([Promise.resolve(42), Math.PI, Promise.reject(rejection)])

    expect(status1.isRejected()).toBe(false)
    expect(status2.isRejected()).toBe(false)
    expect(status3.isRejected()).toBe(true)

    expect(status1.isFulfilled()).toBe(true)
    expect(status2.isFulfilled()).toBe(true)
    expect(status3.isFulfilled()).toBe(false)

    expect(status1.value()).toBe(42)
    expect(status2.value()).toBe(Math.PI)
    expect(::status3.value).toThrow()

    expect(::status1.reason).toThrow()
    expect(::status2.reason).toThrow()
    expect(status3.reason()).toBe(rejection)
  })

  it('works with objects', async () => {
    const rejection = 'fatality'

    const { a: status1, b: status2, c: status3 } = await pSettle({
      a: Promise.resolve(42),
      b: Math.PI,
      c: Promise.reject(rejection),
    })

    expect(status1.isRejected()).toBe(false)
    expect(status2.isRejected()).toBe(false)
    expect(status3.isRejected()).toBe(true)

    expect(status1.isFulfilled()).toBe(true)
    expect(status2.isFulfilled()).toBe(true)
    expect(status3.isFulfilled()).toBe(false)

    expect(status1.value()).toBe(42)
    expect(status2.value()).toBe(Math.PI)
    expect(::status3.value).toThrow()

    expect(::status1.reason).toThrow()
    expect(::status2.reason).toThrow()
    expect(status3.reason()).toBe(rejection)
  })
})
