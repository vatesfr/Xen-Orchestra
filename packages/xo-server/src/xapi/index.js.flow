// @flow

import { type Readable } from 'stream'

type AugmentedReadable = Readable & {
  size?: number,
  task?: Promise<mixed>
}

type MaybeArray<T> = Array<T> | T

export type DeltaVmExport = {|
  streams: $Dict < () => Promise < AugmentedReadable >>,
    vbds: { [ref: string]: Object },
vdis: {
  [ref: string]: {
    $SR$uuid: string,
      snapshot_of: string,
  }
},
version: '1.0.0',
  vifs: { [ref: string]: Object },
vm: Vm,
|}

export type DeltaVmImport = {|
  ...DeltaVmExport,
streams: $Dict < MaybeArray < AugmentedReadable | () => Promise < AugmentedReadable >>>,
|}

declare class XapiObject {
  $id: string;
  $ref: string;
  $type: string;
}

type Id = string | XapiObject

declare export class Vbd extends XapiObject {
  type: string;
  VDI: string;
}

declare export class Vdi extends XapiObject {
  $snapshot_of: Vdi;
  uuid: string;
}

declare export class Vm extends XapiObject {
  $snapshots: Vm[];
  $VBDs: Vbd[];
  is_a_snapshot: boolean;
  is_a_template: boolean;
  name_label: string;
  power_state: 'Running' | 'Halted' | 'Paused' | 'Suspended';
  other_config: $Dict<string>;
  snapshot_time: number;
  uuid: string;
}

export type Compress =  'native' | 'zstd' | ''

declare export class Xapi {
  objects: { all: $Dict<Object> };

  _assertHealthyVdiChains(vm: Vm): void;
  _importVm(
    cancelToken: mixed,
    stream: AugmentedReadable,
    sr?: XapiObject,
    onVmCreation?: (XapiObject) => any
  ): Promise<string>;
  _updateObjectMapProperty(
    object: XapiObject,
    property: string,
    entries: $Dict<null | string>
  ): Promise<void>;
  _setObjectProperties(
    object: XapiObject,
    properties: $Dict<mixed>
  ): Promise<void>;
  _snapshotVm(cancelToken: mixed, vm: Vm, nameLabel?: string): Promise<Vm>;

  addTag(object: Id, tag: string): Promise<void>;
  barrier(): Promise<void>;
  barrier(ref: string): Promise<XapiObject>;
  deleteVm(vm: Id): Promise<void>;
  editVm(vm: Id, $Dict<mixed>): Promise<void>;
  exportDeltaVm(
    cancelToken: mixed,
    snapshot: Id,
    baseSnapshot ?: Id,
    opts?: { fullVdisRequired?: string[] }
  ): Promise<DeltaVmExport>;
  exportVm(
    cancelToken: mixed,
    vm: Vm,
    options?: { compress?: Compress }
  ): Promise<AugmentedReadable>;
  getObject(object: Id): XapiObject;
  importDeltaVm(data: DeltaVmImport, options: Object): Promise<{ vm: Vm }>;
  importVm(stream: AugmentedReadable, options: Object): Promise<Vm>;
  shutdownVm(object: Id): Promise<void>;
  startVm(object: Id): Promise<void>;
}
