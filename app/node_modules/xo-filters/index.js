import angular from 'angular'
import forEach from 'lodash.foreach'
import isEmpty from 'lodash.isempty'
import map from 'lodash.map'
import slice from 'lodash.slice'
import xoApi from 'xo-api'
import moment from 'moment'

// ===================================================================

export default angular.module('xoWebApp.filters', [
  xoApi
])

  // The bytes filters takes a number and formats it using adapted
  // units (KB, MB, etc.).
  .filter('bytesToSize', () => {
    const powers = ['', 'K', 'M', 'G', 'T', 'P']

    return function bytesToSize (bytes, unit = 'B', base = 1024) {
      let i = 0
      while (bytes >= base) {
        bytes /= base
        ++i
      }

      if (bytes === -1) {
        return '-'
      }

      // Maximum 1 decimals.
      bytes = ((bytes * 10) | 0) / 10

      return `${bytes}${powers[i]}${unit}`
    }
  })

  .filter('sizeToBytes', () => {
    /* eslint no-multi-spaces: 0 */

    const RE = new RegExp('^' +
      '(\\d+(?:\\.\\d+)?)' + // digits ('.' digits)?
      '\\s*'               + // Optional spaces between the digits and the unit.
      '([kmgtp])?'         + // Optional unit modifier K/M/G/T/P.
      'b?'                 + // Optional unit (“b”), not meaningful.
    '$', 'i')

    const factors = {
      k: 1024,
      m: 1048576,
      g: 1073741824,
      t: 1099511627776,
      p: 1125899906842624
    }

    return function sizeToBytes (size) {
      const matches = RE.exec(size)

      // If the input is invalid, just returns null.
      if (!matches) {
        return null
      }

      let value = +matches[1]

      const modifier = matches[2]
      if (modifier) {
        const factor = factors[modifier.toLowerCase()]
        if (factor) {
          value *= factor
        }
      }

      return Math.round(value)
    }
  })

  // Simply returns the number of elements in the collection.
  .filter('count', () => {
    const {hasOwnProperty} = Object.prototype

    return function count (collection) {
      if (typeof collection !== 'object') {
        return 0
      }

      // Array.
      if (angular.isArray(collection)) {
        return collection.length
      }

      // Object.
      let n = 0
      for (let key in collection) {
        if (hasOwnProperty.call(collection, key)) {
          ++n
        }
      }
      return n
    }
  })

  // Resolves links between objects.
  .filter('resolve', (xoApi) => xoApi.get)

  .filter('isEmpty', () => isEmpty)
  .filter('isNotEmpty', () => (collection) => !isEmpty(collection))

  .filter('duration', () => (n, unit = 'ms') => (n > 0 && moment.duration(n, unit).humanize() || ''))

  .filter('slice', () => slice)

  // Applies a function to a list of items.
  //
  // If a string is used instead of a function, it will be used as a
  // property name to extract from each item.
  .filter('map', () => map)

  .filter('percentage', () => {
    return function percentage (value) {
      // If `value` is an array of two values, divide the first by the
      // second and multiply by 100.
      if (value.length === 2) {
        // Special case, if the divider is 0, simply returns "N/A".
        if (value[1] === 0) {
          return 'N/A'
        }

        const result = 100 * value[0] / value[1]
        if (isNaN(result)) {
          return 'N/A'
        }

        value = result
      }

      // No decimals at most.
      value = Math.round(value * 1e0) / 1e0

      return `${value}%`
    }
  })

  .filter('osFamily', () => {
    const osToFamily = (function (osByFamily) {
      const osToFamily = Object.create(null)

      forEach(osByFamily, (list, family) => {
        forEach(list, os => {
          osToFamily[os] = family
        })
      })

      return osToFamily
    })({
      linux: [
        'CoreOS'
      ],
      centos: [
        'centos'
      ],
      debian: [
        'debian'
      ],
      fedora: [
        'fedora'
      ],
      gentoo: [
        'gentoo'
      ],
      oracle: [
        'oracle'
      ],
      redhat: [
        'redhat'
      ],
      ubuntu: [
        'ubuntu'
      ],
      solaris: [
        'solaris'
      ],
      freebsd: [
        'freebsd',
        'freeBSD',
        'FreeBSD'
      ],
      netbsd: [
        'netbsd'
      ],
      osx: [
        'osx'
      ],
      'linux-mint': [
        'linux-mint'
      ],
      suse: [
        'sles',
        'suse'
      ],
      windows: [
        'windows'
      ]
    })

    return (osName) => osToFamily[osName] || 'other'
  })

  // A module exports its name.
  .name
